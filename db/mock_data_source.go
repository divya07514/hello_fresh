// Code generated by mockery v2.20.2. DO NOT EDIT.

package db

import (
	model "divya07514-hftest-golang/model"

	mock "github.com/stretchr/testify/mock"
)

// MockDataSource is an autogenerated mock type for the DataSource type
type MockDataSource struct {
	mock.Mock
}

// BusiestPostCode provides a mock function with given fields:
func (_m *MockDataSource) BusiestPostCode() (*model.PostCodeStats, error) {
	ret := _m.Called()

	var r0 *model.PostCodeStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.PostCodeStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.PostCodeStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostCodeStats)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTable provides a mock function with given fields:
func (_m *MockDataSource) CreateTable() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeliveriesPostCode provides a mock function with given fields: postCode, fromTime, toTime
func (_m *MockDataSource) DeliveriesPostCode(postCode string, fromTime string, toTime string) (*model.PostCodeAndTimeStats, error) {
	ret := _m.Called(postCode, fromTime, toTime)

	var r0 *model.PostCodeAndTimeStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.PostCodeAndTimeStats, error)); ok {
		return rf(postCode, fromTime, toTime)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.PostCodeAndTimeStats); ok {
		r0 = rf(postCode, fromTime, toTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostCodeAndTimeStats)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(postCode, fromTime, toTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *MockDataSource) Insert(data model.RecipeData) {
	_m.Called(data)
}

// InsertBatch provides a mock function with given fields: dataChannel
func (_m *MockDataSource) InsertBatch(dataChannel <-chan []model.RecipeData) {
	_m.Called(dataChannel)
}

// ListRecipeNames provides a mock function with given fields: names
func (_m *MockDataSource) ListRecipeNames(names ...string) ([]string, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]string, error)); ok {
		return rf(names...)
	}
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniqueRecipeAndCount provides a mock function with given fields:
func (_m *MockDataSource) UniqueRecipeAndCount() ([]*model.PerRecipeStats, error) {
	ret := _m.Called()

	var r0 []*model.PerRecipeStats
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.PerRecipeStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.PerRecipeStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PerRecipeStats)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniqueRecipeCount provides a mock function with given fields:
func (_m *MockDataSource) UniqueRecipeCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDataSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDataSource creates a new instance of MockDataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataSource(t mockConstructorTestingTNewMockDataSource) *MockDataSource {
	mock := &MockDataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
